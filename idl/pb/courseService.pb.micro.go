// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: courseService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CourseService service

func NewCourseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CourseService service

type CourseService interface {
	CreateCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error)
	GetCoursesList(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseListResponse, error)
	UpdateCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error)
	DeleteCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error)
}

type courseService struct {
	c    client.Client
	name string
}

func NewCourseService(name string, c client.Client) CourseService {
	return &courseService{
		c:    c,
		name: name,
	}
}

func (c *courseService) CreateCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.CreateCourse", in)
	out := new(CourseDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) GetCoursesList(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseListResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.GetCoursesList", in)
	out := new(CourseListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) UpdateCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.UpdateCourse", in)
	out := new(CourseDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) DeleteCourse(ctx context.Context, in *CourseRequest, opts ...client.CallOption) (*CourseDetailResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.DeleteCourse", in)
	out := new(CourseDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseService service

type CourseServiceHandler interface {
	CreateCourse(context.Context, *CourseRequest, *CourseDetailResponse) error
	GetCoursesList(context.Context, *CourseRequest, *CourseListResponse) error
	UpdateCourse(context.Context, *CourseRequest, *CourseDetailResponse) error
	DeleteCourse(context.Context, *CourseRequest, *CourseDetailResponse) error
}

func RegisterCourseServiceHandler(s server.Server, hdlr CourseServiceHandler, opts ...server.HandlerOption) error {
	type courseService interface {
		CreateCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error
		GetCoursesList(ctx context.Context, in *CourseRequest, out *CourseListResponse) error
		UpdateCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error
		DeleteCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error
	}
	type CourseService struct {
		courseService
	}
	h := &courseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CourseService{h}, opts...))
}

type courseServiceHandler struct {
	CourseServiceHandler
}

func (h *courseServiceHandler) CreateCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error {
	return h.CourseServiceHandler.CreateCourse(ctx, in, out)
}

func (h *courseServiceHandler) GetCoursesList(ctx context.Context, in *CourseRequest, out *CourseListResponse) error {
	return h.CourseServiceHandler.GetCoursesList(ctx, in, out)
}

func (h *courseServiceHandler) UpdateCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error {
	return h.CourseServiceHandler.UpdateCourse(ctx, in, out)
}

func (h *courseServiceHandler) DeleteCourse(ctx context.Context, in *CourseRequest, out *CourseDetailResponse) error {
	return h.CourseServiceHandler.DeleteCourse(ctx, in, out)
}
