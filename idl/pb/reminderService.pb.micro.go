// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: reminderService.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ReminderService service

func NewReminderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ReminderService service

type ReminderService interface {
	UpdateDeadLine(ctx context.Context, in *ReminderRequest, opts ...client.CallOption) (*ReminderListRespose, error)
	GetTaskInCache(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*ReminderListRespose, error)
}

type reminderService struct {
	c    client.Client
	name string
}

func NewReminderService(name string, c client.Client) ReminderService {
	return &reminderService{
		c:    c,
		name: name,
	}
}

func (c *reminderService) UpdateDeadLine(ctx context.Context, in *ReminderRequest, opts ...client.CallOption) (*ReminderListRespose, error) {
	req := c.c.NewRequest(c.name, "ReminderService.UpdateDeadLine", in)
	out := new(ReminderListRespose)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderService) GetTaskInCache(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*ReminderListRespose, error) {
	req := c.c.NewRequest(c.name, "ReminderService.GetTaskInCache", in)
	out := new(ReminderListRespose)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReminderService service

type ReminderServiceHandler interface {
	UpdateDeadLine(context.Context, *ReminderRequest, *ReminderListRespose) error
	GetTaskInCache(context.Context, *GetTaskRequest, *ReminderListRespose) error
}

func RegisterReminderServiceHandler(s server.Server, hdlr ReminderServiceHandler, opts ...server.HandlerOption) error {
	type reminderService interface {
		UpdateDeadLine(ctx context.Context, in *ReminderRequest, out *ReminderListRespose) error
		GetTaskInCache(ctx context.Context, in *GetTaskRequest, out *ReminderListRespose) error
	}
	type ReminderService struct {
		reminderService
	}
	h := &reminderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ReminderService{h}, opts...))
}

type reminderServiceHandler struct {
	ReminderServiceHandler
}

func (h *reminderServiceHandler) UpdateDeadLine(ctx context.Context, in *ReminderRequest, out *ReminderListRespose) error {
	return h.ReminderServiceHandler.UpdateDeadLine(ctx, in, out)
}

func (h *reminderServiceHandler) GetTaskInCache(ctx context.Context, in *GetTaskRequest, out *ReminderListRespose) error {
	return h.ReminderServiceHandler.GetTaskInCache(ctx, in, out)
}
